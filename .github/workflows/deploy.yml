name: Deploy

on:
  push:
    branches: ['main']

jobs:
  filter_check:
    name: Filter check
    runs-on: ubuntu-latest
    outputs:
      bot: ${{ steps.filter.outputs.bot }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all: &all
              - '.github/workflows/deploy.yml'
              - 'tools/scripts/docker.sh'
              - '.dockerignore'
              - 'docker-compose.production.yml'
              - 'run.sh'
            bot:
              - *all
              - 'apps/bot/**'
              - 'docker/production/Dockerfile.bot'

  build_bot_image:
    name: Build Bot Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.bot == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Bot image
        run: chmod +x run.sh && ./run.sh ci build bot

  push_bot_to_registry:
    name: Publish Bot to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_bot_image']
    if: needs.filter_check.outputs.bot == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/galaxity

      - name: Set Production Environment
        run: chmod +x run.sh && ./run.sh prod setup env

      - name: Publish Bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.bot
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    # Runs if at least one of the depedant jobs was successful
    if: ${{ always() && needs.push_bot_to_registry.result == 'success'}}
    needs:
      [
        'push_bot_to_registry',
      ]
    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and Deploy
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && chmod +x run.sh && ./run.sh prod update && exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
